# WebSocket port is 3006
# Flask server port is 5000

# WebSocket proxy
upstream websocket {
	server localhost:3006;
	server 127.0.0.1:3006;
    #server subdomain.domain.com:3006;
}

upstream socketio_nodes {
    ip_hash;

    server 127.0.0.1:3006;
    server localhost:3006;
    server subdomain.domain.com:3006;
    # to scale the app, just add more nodes here!
}

upstream socket_nodes {
    ip_hash;

    server 127.0.0.1:3006;
    server localhost:3006;
    server subdomain.domain.com:3006;
    # to scale the app, just add more nodes here!
}

server {

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root /home/ubuntu/camera-streamer;

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html;

	server_name subdomain.domain.com www.subdomain.domain.com;

    # Serving static HTML and JS
    location /client/ {
        alias /home/ubuntu/camera-streamer/clients/;
        index index.html index.htm index.nginx-debian.html;
        try_files $uri $uri/ /client/index.html;
    }

    # Flask server on port 5000
	location ~^/server/(.*)$ {
		proxy_pass http://127.0.0.1:5000/$1;
		proxy_set_header Host $host;		
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection upgrade;
		proxy_set_header Accept-Encoding gzip;
	}

    # WebSocket requests proxy
	 location ~^/ws/(.*)$ {
            proxy_pass http://127.0.0.1:3006/$1;
            proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection upgrade;
            proxy_set_header Accept-Encoding gzip;
        }

    # Certbot SSL
    listen [::]:443 ssl ipv6only=on; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/subdomain.domain.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/subdomain.domain.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot


}


server {
    if ($host = www.subdomain.domain.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    if ($host = subdomain.domain.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


	listen 80 default_server;
	listen [::]:80 default_server;

	server_name subdomain.domain.com www.subdomain.domain.com;
    return 404; # managed by Certbot
}
